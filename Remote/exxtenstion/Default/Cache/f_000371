var strSeparatorArray = new Array("-", " ", "/", ".");
var minYear = 1000;
var maxYear = 9999;

//Tab utils
var activeTabID;
var activeTabLableID;

var browser = navigator.userAgent;
if (browser.indexOf('MSIE') >= 0) {
    browser = 'MSIE';
} else if (browser.indexOf('Trident') >= 0) {
    browser = 'Trident';
} else if (browser.indexOf('Firefox') >= 0) {
    browser = 'Firefox';
} else if (browser.indexOf('Chrome') >= 0) {
    browser = 'Chrome';
} else if (browser.indexOf('Safari') >= 0) {
    browser = 'Safari';
} else if (browser.indexOf('Opera') >= 0) {
    browser = 'Opera';
} else {
    browser = 'UNKNOWN';
}

function checkCodeBrower(obj) {
    if (browser == 'MSIE' || browser == 'Trident') {
        return window.event.keyCode ? event.keyCode : event.charCode;
    } else if (browser == 'Firefox' || browser == 'Chrome') {
        return obj.charCode ? obj.charCode : obj.keyCode ? obj.keyCode : 0;
    }
}
function resizeIframe(){
    var obj = parent.document.getElementById("tranFrame");
    obj.style.height = 0;
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
}

function resizeIframeKHBS(){
    var obj = parent.document.getElementById("tranFrame");
    obj.height = 0;
    obj.height = obj.contentWindow.document.body.scrollHeight + 'px';
}

function activeTab(divID, divLabelID) {
    var divActiveObj = document.getElementById(activeTabID);
    var divObj = document.getElementById(divID);
    var divLabelActiveObj = document.getElementById(activeTabLableID);
    var labelObj = document.getElementById(divLabelID);

    divActiveObj.style.display = 'none';
    divObj.style.display = 'inline';

    activeTabID = divID;

    labelObj.style.color = "#000000";
    labelObj.style.textDecoration = 'none';
    labelObj.style.cursor = 'auto';
    labelObj.style.fontWeight = 'bold';

    divLabelActiveObj.style.color = "#0000FF";
    divLabelActiveObj.style.textDecoration = 'underline';
    divLabelActiveObj.style.cursor = 'hand';
    divLabelActiveObj.style.fontWeight = 'normal';
    activeTabLableID = divLabelID;
    resizeIframe();
}
function activeTabKHBS(divID, divLabelID) {
    var divActiveObj = document.getElementById(activeTabID);
    var divObj = document.getElementById(divID);
    var divLabelActiveObj = document.getElementById(activeTabLableID);
    var labelObj = document.getElementById(divLabelID);

    divActiveObj.style.display = 'none';
    divObj.style.display = 'inline';

    activeTabID = divID;

    labelObj.style.color = "#000000";
    labelObj.style.textDecoration = 'none';
    labelObj.style.cursor = 'auto';
    labelObj.style.fontWeight = 'bold';

    divLabelActiveObj.style.color = "#0000FF";
    divLabelActiveObj.style.textDecoration = 'underline';
    divLabelActiveObj.style.cursor = 'hand';
    divLabelActiveObj.style.fontWeight = 'normal';

    activeTabLableID = divLabelID;
}
// use validate
function IsNumeric(sText) {
    var ValidChars = "0123456789.,-";
    var IsNumber = true;
    var Char;

    for (var i = 0; i < sText.length && IsNumber == true; i++) {
        Char = sText.charAt(i);
        if (ValidChars.indexOf(Char) == -1) {
            IsNumber = false;
            break;
        }
    }

    return IsNumber;
}

function IsDate1(value) {
    if (value == null || value == '') return true;

    if (value.match("(([0-3]?[0-9])\/[0-1]?[0-9]\/[0-9]{4}) *([0-9]{1,2}(:[0-9]{2})? *(am|pm))?")) {
        return true;
    }

    return false;
}
// other function
function PopulateSelect(select_name, _array) {
    var select_ctl = document.getElementsByName(select_name);

    if (select_ctl.length != 1) return;

    var oldItem = select_ctl[0].options[select_ctl[0].selectedIndex];
    select_ctl[0].options.length = 1;
    var list = select_ctl[0].options;
    for (var i = 0; i < _array.length; i++) {
        var newItem = new Option(_array[i][1], _array[i][0]);
        if (newItem.value == oldItem.value) newItem.selected = true;
        list[list.length] = newItem;
    }
}

function SelectValue(name, value) {
    var select_ctl = document.getElementsByName(name);
    if (select_ctl.length != 1) return;

    var list = select_ctl[0].options;
    for (var i = 0; i < list.length; i++) {
        if (list[i].value == value)
            list[i].selected = true;
    }
}
// Cac ham su dung cho check date format
function isInteger(s) {
    var i;
    for (i = 0; i < s.length; i++) {
        var c = s.charAt(i);
        if (((c < "0") || (c > "9"))) return false;
    }
    return true;
}

function DaysArray(n) {
    for (var i = 1; i <= n; i++) {
        this[i] = 31;
        if (i == 4 || i == 6 || i == 9 || i == 11) {
            this[i] = 30;
        }
        if (i == 2) {
            this[i] = 29;
        }
    }
    return this;
}

function daysInFebruary(year) {
    return (((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28);
}

function isDate(dtStr) {
    var dtCh = "*";
    if (dtStr == "") return true;
    var daysInMonth = DaysArray(12);

    for (var intElementNr = 0; intElementNr < strSeparatorArray.length; intElementNr++) {
        if (dtStr.indexOf(strSeparatorArray[intElementNr]) != -1)
            dtCh = strSeparatorArray[intElementNr];
    }
    if (dtCh != "*") //neu co ky hieu phan cach
    {
        var pos1 = dtStr.indexOf(dtCh);
        var pos2 = dtStr.indexOf(dtCh, pos1 + 1);
        if (pos1 == -1 || pos2 == -1) {
            return false;
        }
        var strDay = dtStr.substring(0, pos1);
        var strMonth = dtStr.substring(pos1 + 1, pos2);
        var strYear = dtStr.substring(pos2 + 1);
    } else //khong co ky hieu phan cach
    {
        if (dtStr.length > 5) {
            strDay = dtStr.substr(0, 2);
            strMonth = dtStr.substr(2, 2);
            strYear = dtStr.substr(4);
        } else
            return false;
    }

    if (!isInteger(strYear) || !isInteger(strMonth) || !isInteger(strDay))
        return false;

    strYr = strYear;

    if (strDay.charAt(0) == "0" && strDay.length > 1)
        strDay = strDay.substring(1);

    if (strMonth.charAt(0) == "0" && strMonth.length > 1)
        strMonth = strMonth.substring(1);

    for (var i = 1; i <= 3; i++) {
        if (strYr.charAt(0) == "0" && strYr.length > 1) strYr = strYr.substring(1);
    }

    month = parseInt(strMonth);
    day = parseInt(strDay);
    year = parseInt(strYr);

    if (strMonth.length < 1 || month < 1 || month > 12) {
        return false;
    }
    if (strDay.length < 1 || day < 1 || day > 31 || (month == 2 && day > daysInFebruary(year))
    		|| ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) || day > daysInMonth[month]) {
        return false;
    }

    if (year < 50) year += 2000;
    if (year > 50 && year < 1000) year += 1900;
    if (strYear.length < 1 || year == 0 || year < minYear || year > maxYear) {
        return false;
    }
    if (day < 10) day = "0" + day;
    if (month < 10) month = "0" + month;

    return "" + day + "/" + month + "/" + year;
}

function isMonth(dtStr) {
    var dtCh = "*";
    if (dtStr == "") return "";
//    var daysInMonth = DaysArray(12);
    for (var intElementNr = 0; intElementNr < strSeparatorArray.length; intElementNr++) {
        if (dtStr.indexOf(strSeparatorArray[intElementNr]) != -1)
            dtCh = strSeparatorArray[intElementNr];
    }

    if (dtCh != "*") //neu co ky hieu phan cach
    {
        var pos1 = dtStr.indexOf(dtCh);

        var strMonth = dtStr.substring(0, pos1);
        var strYear = dtStr.substring(pos1 + 1);
    } else //khong co ky hieu phan cach
    {
        if (dtStr.length > 3) {
            strMonth = dtStr.substr(0, 2);
            strYear = dtStr.substr(2);
        } else
            return false;
    }

    if (!isInteger(strYear) || !isInteger(strMonth))
        return false;
    strYr = strYear;

    if (strMonth.charAt(0) == "0" && strMonth.length > 1)
        strMonth = strMonth.substring(1);

    for (var i = 1; i <= 3; i++) {
        if (strYr.charAt(0) == "0" && strYr.length > 1) strYr = strYr.substring(1);
    }

    month = parseInt(strMonth);
    year = parseInt(strYr);

    if (strMonth.length < 1 || month < 1 || month > 12) {
        return false;
    }

    if (year < 50) year += 2000;
    if (year > 50 && year < 1000) year += 1900;
    if (strYear.length < 1 || year == 0 || year < minYear || year > maxYear) {
        return false;
    }
    if (month < 10) month = "0" + month;
    return "" + month + "/" + year;
}

function isYear(dtStr) {
    if (dtStr == "") return "";
//    var daysInMonth = DaysArray(12);
    strYear = dtStr;
    strYr = strYear;
    if (!isInteger(strYear)) return false;
    for (var i = 1; i <= 3; i++) {
        if (strYr.charAt(0) == "0" && strYr.length > 1) strYr = strYr.substring(1);
    }

    year = parseInt(strYr);
    if (year < 50) year += 2000;
    if (year > 50 && year < 1000) year += 1900;
    if (strYear.length < 1 || year == 0 || year < minYear || year > maxYear) {
        return false;
    }
    return "" + year;
}

/**
 * Ham: validDateFormat()
 * Kiem tra, parse truong kieu Date theo cac format khac nhau
 * 	dateField: Item chua gia tri can kiem tra format kieu date
 * 	dateFormat: Kieu format can kiem tra
 * Gia tri:
 * 	true - neu hop le, Gia tri duoc dua ve dang dd/mm/yyyy
 * 	false - neu khong hop le
 * Su dung: onBlur="validDateFormat(this,'dd/mm/yyyy');
 */
function validDateFormat(dateField, dateFormat) {
    var dt = dateField;
    var returndate;

    if ((dt.value == null) || (dt.value == "")) return true;

    if (dateFormat.toUpperCase() == 'DD/MM/YYYY') {
        returndate = isDate(dt.value);
    } else if (dateFormat.toUpperCase() == 'MM/YYYY') {
        returndate = isMonth(dt.value);
    } else if (dateFormat.toUpperCase() == 'YYYY') {
        returndate = isYear(dt.value);
    } else {
        returndate = false;
    }

    if (returndate == false) {
        alert('Đề nghị NNT nhập giá trị dạng (' + dateFormat + ') cho trường này');
        dateField.value= '';
        setTimeout(function() { dt.focus(); }, 1);
        return false;
    } else {
        dt.value = returndate;
        return returndate;
    }
}

function CompareDate(dtStr1, dtStr2) {
    var intDay1 = parseInt(dtStr1.substr(0, 1));
    var intMonth1 = parseInt(dtStr1.substr(3, 4));
    var intYear1 = parseInt(dtStr1.substr(6, 9));

    var intDay2 = parseInt(dtStr2.substr(0, 1));
    var intMonth2 = parseInt(dtStr2.substr(3, 4));
    var intYear2 = parseInt(dtStr2.substr(6, 9));
    var bReturn = true;
    if (intYear1 > intYear2) {
        bReturn = false;
    } else if (intMonth1 > intMonth2) {
        bReturn = false;
    } else if (intDay1 > intDay2) {
        bReturn = false;
    }
    return bReturn;
}

function CompareDate1(dtStr1, dtStr2) {
    var intDay1 = parseInt(dtStr1.substr(0, 1));
    var intMonth1 = parseInt(dtStr1.substr(3, 4));
    var intYear1 = parseInt(dtStr1.substr(6, 9));

    var intDay2 = parseInt(dtStr2.substr(0, 1));
    var intMonth2 = parseInt(dtStr2.substr(3, 4));
    var intYear2 = parseInt(dtStr2.substr(6, 9));
    var bReturn = 0;
    if (intYear1 > intYear2) {
        bReturn = 1;
    } else if (intYear1 < intYear2) {
        bReturn = -1;
    } else if (intMonth1 > intMonth2) {
        bReturn = 1;
    } else if (intMonth1 < intMonth2) {
        bReturn = -1;
    } else if (intDay1 > intDay2) {
        bReturn = 1;
    } else if (intDay1 < intDay2) {
        bReturn = -1;
    } else
        bReturn = 0;

    return bReturn;
}

function CompareDate2(dateFrom, dateTo) // checks if datestr is grtr than todate
{

    var dayFrom, dayTo;
    var monthFrom, monthTo;
    var yearFrom, yearTo;
    // For ToDate
    var dateToPat = /^(\d{1,2})(\/|-)(\d{1,2})\2(\d{4})$/;
    var matchArrayDateTo = dateTo.match(dateToPat);

    monthTo = matchArrayDateTo[3];
    dayTo = matchArrayDateTo[1];
    yearTo = matchArrayDateTo[4];

    // For From Date
    var dateFromPat = /^(\d{1,2})(\/|-)(\d{1,2})\2(\d{4})$/;
    var matchArrayDateFrom = dateFrom.match(dateFromPat);

    monthFrom = matchArrayDateFrom[3];
    dayFrom = matchArrayDateFrom[1];
    yearFrom = matchArrayDateFrom[4];

    // get fullYear
    if (yearTo.length <= 2) {
        dtObj = new Date(yearTo, 10, 10);
        yearTo = dtObj.getFullYear();
    }
    if (yearFrom.length <= 2) {
        dtObj = new Date(yearFrom, 10, 10);
        yearFrom = dtObj.getFullYear();
    }
    if ((monthFrom.length == 1) && (monthFrom < 10)) monthFrom = 0 + monthFrom;
    if ((monthTo.length == 1) && (monthTo < 10)) monthTo = 0 + monthTo;

    if (dayTo.length == 1) dayTo = "0" + dayTo;
    if (dayFrom.length == 1) dayFrom = "0" + dayFrom;

    if (yearFrom > yearTo)
        return -1;
    else if (yearFrom < yearTo) return 1;

    else {
        if (monthFrom > monthTo)
            return -1;
        else if (monthFrom < monthTo) return 1;
        else {
            if (dayFrom > dayTo) return -1;
            else if (dayFrom < dayTo) return 1;
            else return 0;
        }
    }

}
/* Convert to Unicode */
function GetUnicode(iStr) {
    for (i = 0, oStr = ''; i < iStr.length;) {
        if (iStr.charCodeAt(i) == 38) {
            if (iStr.charCodeAt(i + 1) == 35) {
                p = iStr.indexOf(';', i + 2);
                if (p != -1) {
                    if (p - i <= 7) {
                        if (isFinite(iStr.substr(i + 2, p - i - 2))) {
                            oStr = oStr.concat(String.fromCharCode(iStr.substr(i + 2, p - i - 2)));
                            i = p + 1;
                            continue;
                        }
                    }
                }
            } else {
                p = iStr.indexOf(';', i + 1);
                if (p != -1) {
                    switch (iStr.substr(i + 1, p - i - 1)) {
                        case 'amp':
                            oStr = oStr.concat('&');
                            i = p + 1;
                            break;
                        case 'quot':
                            oStr = oStr.concat('"');
                            i = p + 1;
                            break;
                        case 'lt':
                            oStr = oStr.concat('<');
                            i = p + 1;
                            break;
                        case 'gt':
                            oStr = oStr.concat('>');
                            i = p + 1;
                            break;
                    }
                }
            }
        }


        oStr = oStr.concat(iStr.charAt(i));
        i++;
    }

    return oStr;
}
/**
 * Ham : validNumber()
 * Kiem tra du lieu kieu so - Number
 * 	obj: Item chua gia tri can kiem tra
 * 	size: Kich thuoc cua gia tri
 * Su dung: onBlur="validNumber(this,10)";
 */
function validNumber(obj) {
    var strValue = obj.value.toString();
    var numValue;
    if (strValue == '' || strValue == null) {
        obj.value = '0';
    } else {
        if (strValue.indexOf('(') != -1) {
            strValue = strValue.replace('(', '');
            strValue = strValue.replace(')', '');
            strValue = '-' + strValue;
        }
        while (strValue.indexOf('.') != -1) {
            strValue = strValue.replace('.', '');
        }
        if (strValue.length > 15) strValue = strValue.substring(0, 15);
        numValue = parseInt(strValue, 10);

        if (isNaN(numValue)) {
            alert("Bạn phải nhập giá trị số cho trường này!");
            obj.value = '0';
            obj.focus();
            return false;
        }
        obj.value = formatNumber(numValue.toString());
    }

    return true;
}
//function validFloatNumber(obj){
//    var strValue = obj.value.toString();
//    var numValue;
//    if(strValue == '' || strValue == null){
//        strValue = '0,00';
//    }
//    strValue = strValue.replace(',', '.');
//    numValue = parseFloat(strValue);
//    if(isNaN(numValue)) {
//            alert("Bạn phải nhập giá trị số cho trường này!");
//            obj.value='0,00';
//            obj.focus();
//            return false;
//    }
//    //strValue = strValue.replace('.', ',');
//    obj.value = toFormatNumberDe(numValue, 2);
//
//    return true;
//}

function validFloatNumber(obj) {
    var strValue = obj.value.toString();
    var numValue;
    if (strValue == '' || strValue == null) {
        strValue = '0,00';
    }
    if (strValue.indexOf(',') == -1) {
        strValue = strValue + ',00';
    }
    while (strValue.indexOf('.') != -1) {
        strValue = strValue.replace('.', '');
    }
    strValue = strValue.replace(',', '.');

    var pos = strValue.indexOf('.');
    var strValue1 = strValue.substring(0, pos);
    var strValue2 = strValue.substring(pos + 1);

    numValue = parseFloat(strValue1);
    numValue = numValue + '.' + strValue2;

    var resultDe = toFormatNumberDe(numValue, 2);
    var pos1 = resultDe.indexOf(',');
    var intPart = resultDe.substring(0, pos1);
    if (intPart == '') {
        intPart = '0';
    }
    var decPart = resultDe.substring(pos1 + 1);
    if (decPart.length == 1) {
        decPart = decPart + '0';
    }
    obj.value = intPart + ',' + decPart;
    //obj.value = toFormatNumberDe(numValue, 2);
    return true;
}
//valid so co 3 chu so thap phan
function validFloatNumber3Dec(obj) {
    var strValue = obj.value.toString();
    var numValue;
    if (strValue == '' || strValue == null) {
        strValue = '0,000';
    }
    if (strValue.indexOf(',') == -1) {
        strValue = strValue + ',000';
    }
    while (strValue.indexOf('.') != -1) {
        strValue = strValue.replace('.', '');
    }
    strValue = strValue.replace(',', '.');

    var pos = strValue.indexOf('.');
    var strValue1 = strValue.substring(0, pos);
    var strValue2 = strValue.substring(pos + 1);

    numValue = parseFloat(strValue1);
    numValue = numValue + '.' + strValue2;

    var resultDe = toFormatNumberDe(numValue, 3);
    var pos1 = resultDe.indexOf(',');
    var intPart = resultDe.substring(0, pos1);
    if (intPart == '') {
        intPart = '0';
    }
    var decPart = resultDe.substring(pos1 + 1);
    if (decPart.length == 0) {
        decPart = decPart + '000';
    } else if (decPart.length == 1) {
        decPart = decPart + '00';
    } else if (decPart.length == 2) {
        decPart = decPart + '0';
    }
    obj.value = intPart + ',' + decPart;
    //obj.value = toFormatNumberDe(numValue, 3);
    return true;
}
//valid so co n chu so thap phan
function validFloatNumberNDec(obj, n) {
    var strValue = obj.value.toString();
    var numValue;
    var thapphan;
    if (strValue == '' || strValue == null) {
        strValue = '0,';
        for (var i = 0; i < n; i++) {
            strValue = strValue + '0';
        }
    }
    if (strValue.indexOf(',') == -1 && n != 0) {
        strValue = strValue + ',';
        for (var j = 0; j < n; j++) {
            strValue = strValue + '0';
        }
    }
    numValue = strValue.indexOf(',');
    if (numValue > 0 && n != 0) {
        thapphan = strValue.substring(numValue + 1);
        if (n > thapphan.length) {
            for (var k = 0; k < (n - thapphan.length); k++) {
                strValue = strValue + '0';
            }
        }
        if (n < thapphan.length) {
            strValue = strValue.substring(0, numValue + 1) + (strValue.substring(numValue + 1)).substring(0, n);
        }
    }
    if (numValue > 0 && n == 0) {
        strValue = strValue.substring(0, numValue);
    }
    obj.value = strValue;
    return true;
}

function formatNumber(pnumber) {
    if (pnumber == '-0') {
        pnumber = '0';
    }
    var pnumberStr = pnumber;
    var len;
    var firstPartIndex;
    var remainPart;
    var returnValue;
    if (pnumber.indexOf('-') == 0) {
        pnumberStr = pnumber.substring(1);
    }
    if (pnumber.indexOf('.') > 0) {
        pnumberStr = pnumber.substring(0, pnumber.indexOf('.'));
    }
    len = pnumberStr.length;
    if (len < 4) {
        returnValue = pnumberStr;
    } else {
        firstPartIndex = len % 3;
        returnValue = pnumberStr.substring(0, firstPartIndex);
        remainPart = pnumberStr.substring(firstPartIndex);
        len = remainPart.length;

        for (var i = 0; i < len; i = i + 3) {
            returnValue = returnValue + "." + remainPart.substring(i, i + 3);
        }
        if (firstPartIndex == 0) {
            returnValue = returnValue.substring(1);
        }
    }
    if (pnumber.indexOf('-') == 0) {
        returnValue = '(' + returnValue + ')';
    }
    return returnValue;
}

//Sd cho truong hop ko cho nhap so am
function validNumberNotNeg(obj) {
    if (validNumber(obj)) {
        var numVal = toNumber(obj.value);
        if (numVal < 0) {
            alert("Không chấp nhận giá trị âm!");
            obj.focus(this);
            obj.value = '0';
            return false;
        }
        return true;
    }
    return false;
}

//Valid Date: Dung trong truong hop YYYY, năm chấp nhận từ 1901
function validDateFormatY(dateField, dateFormat) {
    if (validDateFormat(dateField, 'yyyy')) {
        if (toNumber(dateField.value) < 1901) {
            dateField.value = '';
        } else {
            return dateField;
        }
    }
}
//Valid Date: Dung trong truong hop DD/MM/YYYY, năm chấp nhận từ 1901
function validDateFormatD(dateField, dateFormat) {
    var dt = dateField;
    var returndate;

    if ((dt.value == null) || (dt.value == "")) return true;

    if (dateFormat.toUpperCase() == 'DD/MM/YYYY') {
        returndate = isDate(dt.value);
    }
    if (returndate == false) {
        alert('Bạn phải nhập giá trị dạng (' + dateFormat + ') cho trường này');
        dt.select();
        return false;
    } else {
        var nam = returndate.split("/")[2];
        if (toNumber(nam) < 1901) {
            returndate = '';
        }
        dt.value = returndate;
        return returndate;
    }
}
//Valid Date: Dung trong truong hop MM/YYYY, năm chấp nhận từ 1901
function validDateFormatM(dateField, dateFormat) {
    var dt = dateField;
    var returndate;

    if ((dt.value == null) || (dt.value == "")) return true;

    if (dateFormat.toUpperCase() == 'MM/YYYY') {
        returndate = isMonth(dt.value);
    }

    if (returndate == false) {
        alert('Bạn phải nhập giá trị dạng (' + dateFormat + ') cho trường này');
        dt.select();
        return false;
    } else {
        var nam = returndate.split("/")[1];
        if (toNumber(nam) < 1901) {
            returndate = '';
        }
        dt.value = returndate;
        return returndate;
    }
}
//Gioi han thue suat khong duoc lon hon 100%
function ktraTSuat(obj, param) {
    if (param == 1) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,0';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',0';
        }
    }
    if (param == 2) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,00';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',00';
        }
    }
    if (param == 3) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,000';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',000';
        }
    }
    if (toNumber(obj.value) > 100) {
        alert('Thuế suất không được lớn hơn 100');
        obj.select();
        return false;
    }
    return true;
}
//Gioi han thue suat khong duoc lon hon 100%
function ktraTLe(obj, param) {
    if (param == 1) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,0';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',0';
        }
    }
    if (param == 2) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,00';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',00';
        }
    }
    if (param == 3) {
        if (obj.value == '' || obj.value == '0') {
            obj.value = '0,000';
        }
        if (obj.value.indexOf(',') == -1) {
            obj.value = obj.value + ',000';
        }
    }
    if (toNumber(obj.value) > 100) {
        alert('Tỷ lệ không được lớn hơn 100');
        obj.select();
        return false;
    }
    return true;
}

// Ham bo cac ky tu trang dau va cuoi xau
// Tham so: s: Xau can cat cac ky tu
function trim(s) {
    var i;
    if (isNull(s)) return "";
    i = s.length - 1;
    while (i >= 0 && s.charAt(i) == ' ') i--;
    s = s.substring(0, i + 1);
    i = 0;
    while (i < s.length && s.charAt(i) == ' ') i++;
    return s.substring(i);
}
/**
 *cuonghd
 */
function trimNBSP(s) {
    i = 0;
    while (i < s.length) {
        if (s.charCodeAt(i) == 160) {
            s = s.replace(s.charAt(i), ' ');
        }
        ++i;
    }
    return trim(s);
}
/**
 * Ham: isNull()
 * Kiem tra Null
 * 	pValue: Gia tri can kiem tra
 * Gia tri:
 *	true - neu gia tri do null
 *	false - neu gia tri not null
 */
function isNull(pValue) {
    return ((pValue == null) || (pValue == ""));
}

function checkNull(obj) {
    if (obj.value == "" || obj.value == null) {
        alert('Bạn chưa nhập giá trị cho trường này');
        setTimeout(function() { obj.focus(); }, 1);
        return false;
    } else return true;
}

function toNumberStr(strNumber) {
    var numStr = strNumber;
    if (null == strNumber || '' == strNumber) {
        return 0;
    }
    if (numStr.indexOf('(') != -1) {
        numStr = numStr.replace('(', '');
        numStr = numStr.replace(')', '');
        numStr = '-' + numStr;
    }
    return numStr;
}

function toNumber(strNumber) {
    var numStr = strNumber;
    if (null == strNumber || '' == strNumber) {
        return 0;
    }

    while (numStr.indexOf('.') != -1) {
        numStr = numStr.replace('.', '');
    }
    while (numStr.indexOf(',') != -1) {
        numStr = numStr.replace(',', '.');
    }
    if (numStr.indexOf('(') != -1) {
        numStr = numStr.replace('(', '');
        numStr = numStr.replace(')', '');
        numStr = '-' + numStr;
    }
    return parseFloat(numStr);
}

function toNumberFloat(strNumber) {
    var numStr = strNumber;
    if (null == strNumber || '' == strNumber) {
        return 0;
    }

    while (numStr.indexOf('.') != -1) {
        numStr = numStr.replace('.', '');
    }
    while (numStr.indexOf(',') != -1) {
        numStr = numStr.replace(',', '.');
    }
    if (numStr.indexOf('(') != -1) {
        numStr = numStr.replace('(', '');
        numStr = numStr.replace(')', '');
        numStr = '-' + numStr;
    }
    //return (parseFloat(numStr)).toFixed(2);
    return (parseFloat(numStr));
}

function isNumber(inputVal) {
    for (var i = 0; i < inputVal.length; i++) {
        var oneChar = inputVal.charAt(i);
        if (oneChar < "0" || oneChar > "9") {
            return false;
        }
    }
    return true;
}

function isNumber1(obj, size) {

    var inputStr = obj.value;
    var oneChar;
    var isPoint = false;
    if (inputStr.charAt(0) == "." || inputStr.charAt(inputStr.length - 1) == ".") return false;
    for (var i = 0; i < inputStr.length; i++) {
        oneChar = inputStr.charAt(i);
        if (size == 2) {
            if (oneChar < "0" || oneChar > "9")
                return false;
        } else {
            if (oneChar == "." && !isPoint)
                isPoint = true;
            else if ((oneChar == "." && isPoint) || ((oneChar != ".") && (oneChar < "0" || oneChar > "9")))
                return false;
        }
    }
    return true;
}
/**
 * Ham : toFormatNumberDe()
 * Dinh dang 1 gia tri so theo dinh dang #,###.##.
 * 	pnumber : Gia tri so can format.
 * 	decimals : So chu so thap phan.
 * Gia tri: So da duoc format
 * Su dung: x = toFormatNumberDe(123,999, 2)
 */
function toFormatNumberDe(pnumber, decimals) {
    if (isNaN(pnumber)) return '';
    if (pnumber == 0 || pnumber == '0') return '0';
    if (isNull(pnumber)) return '';

    var snum = new String(pnumber);
    var sec = snum.split('.');

    var whole = parseFloat(sec[0]);
    var result = '';
    var temp = '';
    if (decimals != 0) {
        if (sec.length > 1) {
            var dec = new String(sec[1]);
            dec = String(parseFloat(sec[1]) / Math.pow(10, (dec.length - decimals)));
            dec = String(whole + Math.round(parseFloat(dec)) / Math.pow(10, decimals));
            var dot = dec.indexOf('.');
            if (dot == -1) {
                dec += '.';
                for (var i = 1; i <= decimals; i++) {
                    dec += '0';
                }
            }
            result = dec;
        } else {
            result = whole;
        }
    } else {
        result = whole;
    };
    snum = String(result);
    sec = snum.split('.');
    result = sec[0];
    if (sec[0].length > 3) {
        dec = sec[0];
        pos = dec.length % 3;
        temp = dec.substr(0, pos);
        dec = dec.substr(pos, dec.length);
        pos = (dec.length - pos) / 3;
        for (i = 0; i < pos; i++) {
            if (temp.length > 0) temp = temp + ',';
            temp += dec.substr(3 * i, 3);
        }
        result = temp;
    }

    if (sec.length > 1) {
        result += '.';
        temp = sec[1];
        pos = temp.length;
        result += temp;
    }
    result = result.replace('.', '!');
    while (result.indexOf(',') != -1) {
        result = result.replace(',', '.');
    }
    result = result.replace('!', ',');
    //        if(result=='-0' ){
    //            result ='0';
    //        }
    //        if(result.indexOf('-') == 0) {
    //            result = result.replace('-', '(');
    //            result = result + ')';
    //        }
    return result;
}

function toFormatNumberDeFloat(pnumber, decimals) {
    if (isNaN(pnumber)) return '';
    if (pnumber == 0 || pnumber == '0') return '0';
    if (isNull(pnumber)) return '';

    var snum = new String(pnumber);
    var sec = snum.split('.');

    var whole = parseFloat(sec[0]);
    var result = '';
    var temp = '';
    if (decimals != 0) {
        if (sec.length > 1) {
            var dec = new String(sec[1]);
            dec = String(parseFloat(sec[1]) / Math.pow(10, (dec.length - decimals)));
            dec = String(whole + Math.round(parseFloat(dec)) / Math.pow(10, decimals));
            dec = String((parseFloat(dec)).toFixed(decimals));
            var dot = dec.indexOf('.');
            if (dot == -1) {
                dec += '.';
                for (var i = 1; i <= decimals; i++) {
                    dec += '0';
                }
            }
            result = dec;
        } else {
            result = whole;
        }
    } else {
        result = whole;
    };
    snum = String(result);
    sec = snum.split('.');
    result = sec[0];
    if (sec[0].length > 3) {
        dec = sec[0];
        pos = dec.length % 3;
        temp = dec.substr(0, pos);
        dec = dec.substr(pos, dec.length);
        pos = (dec.length - pos) / 3;
        for (i = 0; i < pos; i++) {
            if (temp.length > 0) temp = temp + ',';
            temp += dec.substr(3 * i, 3);
        }
        result = temp;
    }

    if (sec.length > 1) {
        result += '.';
        temp = sec[1];
        pos = temp.length;
        result += temp;
    }
    result = result.replace('.', '!');
    while (result.indexOf(',') != -1) {
        result = result.replace(',', '.');
    }
    result = result.replace('!', ',');
    //        if(result=='-0' ){
    //            result ='0';
    //        }
    //        if(result.indexOf('-') == 0) {
    //            result = result.replace('-', '(');
    //            result = result + ')';
    //        }
    return result;
}
/**
 * Ham: toFormatNumber()
 * Dat format cho cac truong kieu so theo dinh dang #.### (0 chu so thap phan)
 * 	pnumber: Gia tri so can format.
 * Gia tri:  Gia tri so da duoc format.
 * Su dung: x = toFormatNumber('123456');
 */
function toFormatNumber(pnumber) {
    return toFormatNumberDe(pnumber, 0);
}

function SetOptionsForSelect(select_name, _array) {
    var select_ctl = document.getElementsByName(select_name);

    if (select_ctl.length != 1) return;

    var oldItem = null;
    try {
        oldItem = select_ctl[0].options[select_ctl[0].selectedIndex];
    } catch (exception) {}

    select_ctl[0].options.length = 0;
    var list = select_ctl[0].options;
    for (var i = 0; i < _array.length; i++) {
        var newItem = new Option(_array[i][1], _array[i][0]);
        if (oldItem != null && newItem.value == oldItem.value) newItem.selected = true;
        list[list.length] = newItem;
    }
}

function toDate(sDate, sFormatMark) {
//    var sDatetemp
    var values = sDate.split("/");
    var yr_num;
    var mo_num;
    var day_num;
    if ((sFormatMark.toUpperCase() == "DD/MM/YYYY") || (sFormatMark.toUpperCase() == "D")) {
        yr_num = values[2];
        mo_num = values[1] - 1;
        day_num = values[0];
    } else if ((sFormatMark.toUpperCase() == "MM/YYYY") || (sFormatMark.toUpperCase() == "M")) {
        yr_num = values[1];
        mo_num = values[0] - 1;
        day_num = 1;
    } else if ((sFormatMark.toUpperCase() == "Q/YYYY") || (sFormatMark.toUpperCase() == "Q")) {
        yr_num = values[1];
        values = values[0].split("Q");
        mo_num = (values[1] * 3 - 2) - 1;
        day_num = 1;
    } else if ((sFormatMark.toUpperCase() == "YYYY") || (sFormatMark.toUpperCase() == "Y")) {
        yr_num = values[0];
        mo_num = 0;
        day_num = 1;
    }
    return new Date(yr_num, mo_num, day_num);
}
//Kiểm tra cấu trúc của Mã số thuế
function ktraCTrucTIN(strTINObj) {
    var strTIN = strTINObj.value;
    // strTIN = ReplaceAll(strTIN, ' ', '');
    if (strTIN != '' && (strTIN.length < 10 || strTIN.length > 14)) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        strTINObj.value = '';
        setTimeout(function() { strTINObj.focus(); }, 1);
        return false;
    }
    if (strTIN.length == 10) {
        var n1 = (strTIN.substring(0, 1)) * 31;
        var n2 = (strTIN.substring(1, 2)) * 29;
        var n3 = (strTIN.substring(2, 3)) * 23;
        var n4 = (strTIN.substring(3, 4)) * 19;
        var n5 = (strTIN.substring(4, 5)) * 17;
        var n6 = (strTIN.substring(5, 6)) * 13;
        var n7 = (strTIN.substring(6, 7)) * 7;
        var n8 = (strTIN.substring(7, 8)) * 5;
        var n9 = (strTIN.substring(8, 9)) * 3;
        var n10 = strTIN.substring(9, 10);

        var soDu = (n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9) % 11;
        var hieuSo = 10 - soDu;
        if (strTIN != '' && hieuSo != n10) {
        	strTINObj.value = '';
            alert('Mã số thuế không đúng, hãy nhập lại');
            setTimeout(function() { strTINObj.focus(); }, 1);
            return false;
        }
    }
    if (strTIN.length > 10 && strTIN.length < 14) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        strTINObj.value = '';
        setTimeout(function() { strTINObj.focus(); }, 1);
        return false;
    }
/*    if (strTIN.length == 13) {
        var n11 = toNumber(strTIN.substring(10, 11));
        var n12 = toNumber(strTIN.substring(11, 12));
        var n13 = toNumber(strTIN.substring(12, 13));
        if (!(n11 >= 0 || n11 <= 9) || !(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9)) {
            alert('Mã số thuế không đúng, hãy nhập lại');
            strTINObj.value = '';
            setTimeout(function() { strTINObj.focus(); }, 1);
            return false;
        }
    }*/
    if (strTIN.length == 14) {
        var n11 = strTIN.substring(10, 11);
        var n12 = toNumber(strTIN.substring(11, 12));
        var n13 = toNumber(strTIN.substring(12, 13));
        var n14 = toNumber(strTIN.substring(13, 14));

        if (n11.toString() != '-') {
            alert('Mã số thuế không đúng, hãy nhập lại');
            strTINObj.value = '';
            setTimeout(function() { strTINObj.focus(); }, 1);
            return false;
        } else {
            if (!(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9) || !(n14 >= 0 || n14 <= 9)) {
                alert('Mã số thuế không đúng, hãy nhập lại');
                strTINObj.value = '';
                setTimeout(function() { strTINObj.focus(); }, 1);
                return false;
            }
        }
    }
    return true;
}
//Kiểm tra cấu trúc của Mã số thuế ko focus
function ktraCauTrucMST(strTINObj) {
    var strTIN = strTINObj.value;
    // strTIN = ReplaceAll(strTIN, ' ', '');
    if (strTIN != '' && (strTIN.length < 10 || strTIN.length > 14)) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        return false;
    }
    for (var i = 0; i < strTIN.length; i++) {
        if (i != 10) {
            if (isNaN(strTIN.charAt(i))) {
                alert('Mã số thuế không đúng, hãy nhập lại');
                return false;
            }
        }
    }
    if (strTIN.length == 10) {
        var n1 = (strTIN.substring(0, 1)) * 31;
        var n2 = (strTIN.substring(1, 2)) * 29;
        var n3 = (strTIN.substring(2, 3)) * 23;
        var n4 = (strTIN.substring(3, 4)) * 19;
        var n5 = (strTIN.substring(4, 5)) * 17;
        var n6 = (strTIN.substring(5, 6)) * 13;
        var n7 = (strTIN.substring(6, 7)) * 7;
        var n8 = (strTIN.substring(7, 8)) * 5;
        var n9 = (strTIN.substring(8, 9)) * 3;
        var n10 = strTIN.substring(9, 10);

        var soDu = (n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9) % 11;
        var hieuSo = 10 - soDu;
        if (strTIN != '' && hieuSo != n10) {
            alert('Mã số thuế không đúng, hãy nhập lại');
            return false;
        }
    }
    if (strTIN.length > 10 && strTIN.length < 13) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        return false;
    }
    if (strTIN.length == 13) {
        var n11 = toNumber(strTIN.substring(10, 11));
        var n12 = toNumber(strTIN.substring(11, 12));
        var n13 = toNumber(strTIN.substring(12, 13));
        if (!(n11 >= 0 || n11 <= 9) || !(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9)) {
            alert('Mã số thuế không đúng, hãy nhập lại');
            return false;
        }
    }
    if (strTIN.length == 14) {
        var n11 = strTIN.substring(10, 11);
        var n12 = toNumber(strTIN.substring(11, 12));
        var n13 = toNumber(strTIN.substring(12, 13));
        var n14 = toNumber(strTIN.substring(13, 14));

        if (n11.toString() != '-') {
            alert('Mã số thuế không đúng, hãy nhập lại');
            return false;
        } else {
            if (!(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9) || !(n14 >= 0 || n14 <= 9)) {
                alert('Mã số thuế không đúng, hãy nhập lại');
                return false;
            }
        }
    }
    return true;
}
//Keycode: Enter: 13, Esc: 27, Backspace: 8, Tap: 9, Dấu -: 189, 109(bên phải bàn phím), Delete: 46
//Ham thuc hien khong cho nhap gia tri am va ky tu khong phai la so
function AllowIntKey(ctl, event) {
    var keyCode = checkCodeBrower(event);
    // by pass function key.
    if (event.charCode == 0 || keyCode == 13 || keyCode == 27) {
        return true;
    }
    // accept charater key
    if (keyCode >= 48 && keyCode <= 57) {
        return true;
    }
    return false;
}

function notAllowPressSpace(obj) {
    if (event.keyCode == 32) event.returnValue = false;
}

function allowPressComma2(obj) {
    var keyCode = checkCodeBrower(obj);
    var dsChar = ',';

    if ((event.keyCode >= 33 && event.keyCode <= 42) || event.keyCode == 60 || event.keyCode == 64 || event.keyCode == 94) {
        return false;
    }

    if (obj.value.indexOf(dsChar) >= 0) {
        if (event.charCode == 0 || keyCode == 8 || keyCode == 9 || keyCode == 13 || keyCode == 27) {
            return true;
        }
        if (keyCode == 46 || (keyCode >= 48 && keyCode <= 57)) {
            return true;
        }
    } else {
        if (event.charCode == 0 || keyCode == 8 || keyCode == 9 || keyCode == 13 || keyCode == 27) {
            return true;
        }
        if ((keyCode == 44 || keyCode == 46 || keyCode == 188) || (keyCode >= 48 && keyCode <= 57)) {
            return true;
        }
    }
    return false;
}

function notAllowPressSpeChar() {
    if ((event.keyCode >= 33 && event.keyCode <= 42) || event.keyCode == 60 || event.keyCode == 64 || event.keyCode == 94 ) event.returnValue = false;
    //    var keyCode = evt.keyCode || evt.charCode;
    //    if((keyCode >= 33 && keyCode <= 42) || keyCode == 60 || keyCode == 64 || keyCode == 94)
    //    return false;
}

function notAllowPressSpeChar1() {
    if ((event.keyCode >= 33 && event.keyCode <= 42) || event.keyCode == 60 || event.keyCode == 64 || event.keyCode == 94 || (event.keyCode >= 48 && event.keyCode <=57)) event.returnValue = false;
}

function ktraPressEnter(e) {
    var evt = e ? e : window.event;
    if (evt.keyCode == 13) {
        if (!ktraKyKK()) {
            return false;
        }
    }
}

function addZezoValue(value) {
    var reVal = '';
    if (value > 0) {
        for (var i = 0; i < value; i++) {
            reVal = reVal + '0';
        }
    }
    return reVal;
}

function allowPressCommaWithLimit(ctl, quotaNum) {
    var dsChar = ','; // dau phay
    var pnumber = toNumber(ctl.value);
    if (pnumber == 0 || pnumber == '0') return ctl.value = '0,' + addZezoValue(quotaNum);
    if (ctl.value.indexOf(dsChar) >= 0) {
        var tempNumber = ctl.value;
        var decPart = tempNumber.substring(tempNumber.indexOf(",") + 1);
        if (decPart = null || decPart == '' || decPart.length == 0) {
            ctl.value = tempNumber.substring(0, (tempNumber.indexOf(',')));
        } else {
            if (((tempNumber.length + 1) - tempNumber.indexOf(',')) > quotaNum) {
                ctl.value = tempNumber.substring(0, (tempNumber.indexOf(',') + quotaNum + 1));
                return false;
            }
        }
    }
    return true;
}

function formatNormalDateField(obj, item_name, action_event) {
    var sltCTieuId = obj.id;
    var objRowIdx = sltCTieuId.substring(sltCTieuId.lastIndexOf('_'));
    var date_temp = document.getElementById(item_name + objRowIdx);
    var acc_format = false;

    if (action_event == 'KD') {
        var keyCode = window.event.keyCode ? event.keyCode : event.charCode;
        if (keyCode == 13 || keyCode == 9) {
            acc_format = true;
        }
    }

    if (action_event == 'CL') {
        acc_format = true;
    }

    if (acc_format == true && (date_temp.value == null || date_temp.value == '')) {
        date_temp.value = '../../…';
        date_temp.select();
    }
}

function formatFloatValue(pnumber, pos) {
    var checkNumber = false;
    var vReturn = '';
    if (pnumber.indexOf('-') == 0) {
        pnumber = pnumber.substring(1);
        checkNumber = true;
    }
    if (pnumber == 0 || pnumber == '0') return '0,' + addZezoValue(pos);
    var snum = new String(pnumber);
    snum = ReplaceAll(snum, '.', '');
    if (snum.indexOf(',') != -1) {
        var sec = snum.split(',');
        var part1 = formatNumber(sec[0].toString());
        var temp = snum.indexOf(',') + toNumber(pos.toString()) + 1;
        var temp2 = snum.substring(snum.indexOf(',') + 1, temp);
        var abc = pos - temp2.length;
        var part2 = temp2 + addZezoValue(abc);
        vReturn = part1 + ',' + part2;
        if (checkNumber)
            vReturn = '(' + vReturn + ')';
        return vReturn;
    } else {
        vReturn = formatNumber(snum).toString() + ',' + addZezoValue(pos);
        if (checkNumber)
            vReturn = '(' + vReturn + ')';
        return vReturn;
    }
}

function addZezoValue(value) {
    var reVal = '';
    if (value > 0) {
        for (var i = 0; i < value; i++) {
            reVal = reVal + '0';
        }
    }
    return reVal;
}

function ReplaceAll(Source, stringToFind, stringToReplace) {
    var temp = Source;
    var index = temp.indexOf(stringToFind);
    while (index != -1) {
        temp = temp.replace(stringToFind, stringToReplace);
        index = temp.indexOf(stringToFind);
    }
    return temp;
}

function formatSoNguyenDuong(obj) {
    //      var keyCode = window.event.keyCode? event.keyCode : event.charCode;
    //      if(keyCode!=37&&keyCode!=39&&keyCode!=46&&keyCode!=9&&keyCode!=35&&keyCode!=36&&keyCode!=13){
    //          var strvalue;
    //          strvalue = obj.value;
    //          var str =strvalue.split('.');
    //          var num;
    //          var val= strvalue;
    //          strvalue = '';
    //            for(var i=0;i<val.length;i++){
    //                strvalue+=getVal(val.charAt(i));
    //            }
    //            num = strvalue.toString().replace(/\$|\./g,'');
    //            if(num.length>15) num = num.substring(0,15);
    //            if(!IsNumeric(num))
    //            num = "0";
    //            sign = (num == (num = Math.abs(num)));
    //            num = Math.floor(num*100+0.50000000001);
    //            num = Math.floor(num/100).toString();
    //            for (var i = 0; i < Math.floor((num.length-(1+i))/3); i++)
    //            num = num.substring(0,num.length-(4*i+3))+'.'+
    //            num.substring(num.length-(4*i+3));
    //            //return (((sign)?'':'-') + num);
    //            eval(obj).value = (((sign)?'':'-') + num);
    //      }
    //huongmv
	var keyCode = checkCodeBrower(obj);
    if (keyCode != 37 && keyCode != 39 && keyCode != 8 && keyCode != 46 && keyCode != 9 && keyCode != 35 && keyCode != 36 && keyCode != 13) {
    var strvalue;
    strvalue = obj.value;
    var str = strvalue.split('.');
    var num;
    var val = strvalue;
    strvalue = '';
    for (var i = 0; i < val.length; i++) {
        strvalue += getVal(val.charAt(i));
    }
    num = strvalue.toString().replace(/\$|\./g, '');
    if (num.length > 15) num = num.substring(0, 15);
    if (!IsNumeric(num))
        num = "0";
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    num = Math.floor(num / 100).toString();
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + '.' +
        num.substring(num.length - (4 * i + 3));
    //return (((sign)?'':'-') + num);
    eval(obj).value = (((sign) ? '' : '-') + num);
    }
}
function formatSoNguyenDuong05QTT(obj) {
    //huongmv
	var keyCode = checkCodeBrower(obj);
    if (keyCode != 37 && keyCode != 39 && keyCode != 8 && keyCode != 46 && keyCode != 9 && keyCode != 35 && keyCode != 36 && keyCode != 13) {
    var strvalue;
    strvalue = obj.value;
    name = obj.name;
    var str = strvalue.split('.');
    var num;
    var val = strvalue;
    strvalue = '';
    for (var i = 0; i < val.length; i++) {
        strvalue += getVal(val.charAt(i));
    }
    num = strvalue.toString().replace(/\$|\./g, '');
//    if (num.length > 16) num = num.substring(0, 16);
    if (!IsNumeric(num))
        num = "0";
//    alert('1 '  +num);
//    sign = (num == (num = Math.abs(num)));
//    alert('2 '  +num);
//    num = Math.floor(num * 100 + 0.50000000001);
//    alert('3 '  +num);
//    num = Math.floor(num / 100).toString();
//    alert('4 '  +num);
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + '.' +
        num.substring(num.length - (4 * i + 3));
    eval(obj).value = (((sign) ? '' : '-') + num);
    }
}
function getVal(num) {
    if (num == '' || checkNumeric(num)) {
        return '';
    } else {
        return (num);
    }
}

function checkNumeric(sText) {
    var ValidChars = "0123456789";
    var IsNumber = true;
    if (ValidChars.indexOf(sText) != -1) {
        IsNumber = false;
    }
    return IsNumber;
}

function formatPhan(number) {
    var num = number.toString().replace(/\$|\./g, '');
    if (num.length > 15) num = num.substring(0, 15);
    num = Math.floor(num * 100 + 0.50000000001);
    num = Math.floor(num / 100).toString();
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + '.' +
        num.substring(num.length - (4 * i + 3));
    return num;
}

function allowPressNeg(obj) {
    var dsChar = '-';
    if (obj.value.indexOf(dsChar) >= 0) {
        if ((event.keyCode < 48 && event.keyCode != 9) || event.keyCode > 57) event.returnValue = false;
    } else {
        if ((event.keyCode < 48 && event.keyCode != 9 && event.keyCode != 45) || event.keyCode > 57) event.returnValue = false;
    }
}

function formatSoAm(obj) {
    var keyCode = checkCodeBrower(obj);
    if (keyCode != 37 && keyCode != 39 && keyCode != 8 && keyCode != 46 && keyCode != 9 && keyCode != 35 && keyCode != 36 && keyCode != 13) {
        if (obj.value.indexOf('-') == 0 || obj.value.indexOf('(') == 0 ) {
            var strvalue = obj.value.substring(1);
            var val = strvalue;
            strvalue = '';
            for (var i = 0; i < val.length; i++) {
                strvalue += getVal(val.charAt(i));
            }
            strvalue = formatPhan(strvalue);
            //      if(strvalue=='0'){
            //        strvalue ='';
            //      }
            obj.value = "-" + (strvalue);
        } else {
            var strvalue = obj.value;
            var val = strvalue;
            strvalue = '';
            for (var i = 0; i < val.length; i++) {
                strvalue += getVal(val.charAt(i));
            }
            obj.value = formatPhan(strvalue);
        }
    }
}

function formatDauPhay(obj) {
    var keyCode = checkCodeBrower(obj);
    if (keyCode != 37 && keyCode != 39 && keyCode != 8 && keyCode != 46 && keyCode != 9 && keyCode != 35 && keyCode != 36 && keyCode != 13) {
        if (obj.value.indexOf(',') == -1) {
            var strvalue = obj.value;
            var val = strvalue;
            strvalue = '';
            for (var i = 0; i < val.length; i++) {
                strvalue += getVal(val.charAt(i));
            }
            strvalue = formatPhan(strvalue);
            obj.value = (strvalue);
        } else if (obj.value.indexOf(',') > 0) {
            var strvalue = obj.value;
            var strvalue2 = '';
            var val1 = strvalue.split(',')[0];
            var val2 = strvalue.split(',')[1];
            var val = val1;
            strvalue = '';
            for (var i = 0; i < val.length; i++) {
                strvalue += getVal(val.charAt(i));
            }
            val1 = formatPhan(strvalue);
            for (var i = 0; i < val2.length; i++) {
                strvalue2 += getVal(val2.charAt(i));
            }
            obj.value = val1 + ',' + strvalue2;
        }
    }
}

function checkIsNumber(obj) {
    var strValue = obj.value.toString();
    var numValue;
    if (strValue == '' || strValue == null) {
        obj.value = '0';
    } else {
        if (strValue.indexOf('(') != -1) {
            strValue = strValue.replace('(', '');
            strValue = strValue.replace(')', '');
            strValue = '-' + strValue;
        }
        while (strValue.indexOf('.') != -1) {
            strValue = strValue.replace('.', '');
        }
        if (strValue.length > 15) strValue = strValue.substring(0, 15);
        numValue = parseInt(strValue, 10);

        if (isNaN(numValue)) {
            obj.focus();
            alert("Bạn phải nhập giá trị số cho trường này!");
            obj.value = 0;
            return false;
        }
        obj.value = formatNumber(numValue.toString());
    }

    return true;
}

function checkIsNumberNeg(obj) {
    if (checkIsNumber(obj)) {
        var numVal = toNumber(obj.value);
        if (numVal < 0) {
            alert("Không chấp nhận giá trị âm!");
            obj.focus(this);
            obj.value = '0';
            return false;
        }
        return true;
    }
    return false;
}
/**
 * Cuonghd
 * lam tron so thap phan den quotaNum so sau day phay
 * @param obj
 * @param quotaNum
 */
function toFixedField(obj, quotaNum) {
    var num = new Number(toNumber(obj.value));
    num = num.toFixed(quotaNum);
    var decPart;
    var int;
    if (0 <= num.toString().indexOf(".")) {
        decPart = num.toString().substring(num.toString().indexOf(".") + 1);
        int = num.toString().substring(0, num.toString().indexOf("."));
    } else {
        decPart = num.toString().substring(num.toString().indexOf(",") + 1);
        int = num.toString().substring(0, num.toString().indexOf(","));
    }
    obj.value = formatNumber(int) + "," + decPart;
}
/**
 * thanhnx1
 * lam tron so thap phan den quotaNum so sau day phay dau am
 * @param obj
 * @param quotaNum
 */
function toFixedField_Am(obj, quotaNum) {
    var num = new Number(toNumber(obj.value));
    num = num.toFixed(quotaNum);
    var decPart;
    var int;
    if (0 <= num.toString().indexOf(".")) {
        decPart = num.toString().substring(num.toString().indexOf(".") + 1);
        int = num.toString().substring(0, num.toString().indexOf("."));
    } else {
        decPart = num.toString().substring(num.toString().indexOf(",") + 1);
        int = num.toString().substring(0, num.toString().indexOf(","));
    }
    if (int.toString().indexOf("-") >= 0) {
        int = int.toString().substr(1);
        obj.value = "(" + formatNumber(int) + "," + decPart + ")";
    } else {
        obj.value = formatNumber(int) + "," + decPart;
    }
}
/**
 * Cuonghd
 * lam tron so thap phan den quotaNum so sau day phay
 * @param num
 * @param quotaNum
 */
function toFixedField1(num, quotaNum) {
//    num = num.toFixed(quotaNum);
    var decPart;
    var int;
    if (0 <= num.toString().indexOf(".")) {
        decPart = num.toString().substring(num.toString().indexOf(".") + 1);
        int = num.toString().substring(0, num.toString().indexOf("."));
    } else {
        decPart = num.toString().substring(num.toString().indexOf(",") + 1);
        int = num.toString().substring(0, num.toString().indexOf(","));
    }
    return formatNumber(int) + "," + decPart;
}
/**
 * anhmh
 * lay so thap phan den quotaNum so sau dau phay
 * @param num
 * @param quotaNum
 * @param id
 */
function demoFix(num,quotaNum,id){
	var b = Number(quotaNum);

	var a = num.value;
	var num1 = a.toString();
	var num3 = num1.split(',');
	var num2 = num3[1];
	num = num2.substring(0,b);
	document.getElementById(id).value= num3[0] + "," + num;
}

function checkUQuyen(obj) {
    var donViUQuyenObj = document.getElementById('donViUQuyen');
    var daiLyThueObj = document.getElementById('daiLyThue');
    if ('daiLyThue' == obj && daiLyThueObj.checked == true) {
        donViUQuyenObj.checked = false;
    } else if('donViUQuyen' == obj && donViUQuyenObj.checked == true){
        daiLyThueObj.checked = false;
    }else{
    	donViUQuyenObj.checked = false;
        daiLyThueObj.checked = false;
    }
}

function calculateNumberFloat() {
    var argv = calculateNumberFloat.arguments;
    var argc = argv.length;
    var itemValue;
    var total = 0;
    var i;
    var sign;
    for (i = 0; i < argc; i++) {
    	itemValue = argv[i];
        itemValue = ReplaceAll(itemValue.toString(),'.','');
        total = total + toNumber(itemValue);
    }    
    return total/100;
}

// AnhVt Kiểm tra cấu trúc của Mã số thuế
function ktraCTrucTIN1(strTINObj) {
    var strTIN = strTINObj.value;
    // strTIN = ReplaceAll(strTIN, ' ', '');
    if (strTIN != '' && (strTIN.length < 10 || strTIN.length > 14)) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        strTINObj.value = '';
        setTimeout(function() { strTINObj.focus(); }, 1);
        return false;
    }
    if (strTIN.length == 10) {
        var n1 = (strTIN.substring(0, 1)) * 31;
        var n2 = (strTIN.substring(1, 2)) * 29;
        var n3 = (strTIN.substring(2, 3)) * 23;
        var n4 = (strTIN.substring(3, 4)) * 19;
        var n5 = (strTIN.substring(4, 5)) * 17;
        var n6 = (strTIN.substring(5, 6)) * 13;
        var n7 = (strTIN.substring(6, 7)) * 7;
        var n8 = (strTIN.substring(7, 8)) * 5;
        var n9 = (strTIN.substring(8, 9)) * 3;
        var n10 = strTIN.substring(9, 10);

        var soDu = (n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9) % 11;
        var hieuSo = 10 - soDu;
        if (strTIN != '' && hieuSo != n10) {
        	strTINObj.value = '';
            alert('Mã số thuế không đúng, hãy nhập lại');
            setTimeout(function() { strTINObj.focus(); }, 1);
            return false;
        }
    }
    if (strTIN.length > 10 && strTIN.length < 14) {
        alert('Mã số thuế không đúng, hãy nhập lại');
        strTINObj.value = '';
        setTimeout(function() { strTINObj.focus(); }, 1);
        return false;
    }
//    if (strTIN.length == 13) {
//        var n11 = toNumber(strTIN.substring(10, 11));
//        var n12 = toNumber(strTIN.substring(11, 12));
//        var n13 = toNumber(strTIN.substring(12, 13));
//        if (!(n11 >= 0 || n11 <= 9) || !(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9)) {
//            alert('Mã số thuế không đúng, hãy nhập lại');
//            strTINObj.value = '';
//            setTimeout(function() { strTINObj.focus(); }, 1);
//            return false;
//        }
//    }
    if (strTIN.length == 14) {
        var n11 = strTIN.substring(10, 11);
        var n12 = toNumber(strTIN.substring(11, 12));
        var n13 = toNumber(strTIN.substring(12, 13));
        var n14 = toNumber(strTIN.substring(13, 14));

        if (n11.toString() != '-') {
            alert('Mã số thuế không đúng, hãy nhập lại');
            strTINObj.value = '';
            setTimeout(function() { strTINObj.focus(); }, 1);
            return false;
        } else {
            if (!(n12 >= 0 || n12 <= 9) || !(n13 >= 0 || n13 <= 9) || !(n14 >= 0 || n14 <= 9)) {
                alert('Mã số thuế không đúng, hãy nhập lại');
                strTINObj.value = '';
                setTimeout(function() { strTINObj.focus(); }, 1);
                return false;
            }
        }
    }
    return true;
}

function lastday(y,m){
return  new Date(y, m + 1, 0).getDate();
}

// cong thang
function addMonths (obj, count) {
	// do nnt nhap vao date dang dd/mm/yyyy nen phai chuyen sang mm/dd/yyyy trc khi tao new Date
	var arr = obj.split('/');
	var c = arr[1] + '/' + arr[0] + '/'+ arr[2];
	
	var date = new Date(c);
	  if (date && count) {
	    var m, d = date.getDate();
	    date.setMonth(date.getMonth() + count, 1);
	    m = date.getMonth();
	    date.setDate(d);
	    if (date.getMonth() !== m) date.setDate(0);
	  }
	  date.setDate(date.getDate() - 1);
	  return dateToStr(date,'dd/mm/yyyy');
	}

// cong ngay
function addDate (obj, count) {
	// do nnt nhap vao date dang dd/mm/yyyy nen phai chuyen sang mm/dd/yyyy trc khi tao new Date
	var arr = obj.split('/');
	var c = arr[1] + '/' + arr[0] + '/'+ arr[2];
	
	var date = new Date(c);
	  if (date && count) {
	    var d;
	    date.setDate(date.getDate() + count);
	    d = date.getDate();
	  }
	  return dateToStr(date,'dd/mm/yyyy');
	}

// convert date to string	
function dateToStr(date){
	var y = date.getFullYear().toString();
	var m = (date.getMonth() +1).toString();
	var d = date.getDate().toString();
	if(m.length == 1){
		m = '0'+m;				
	}
	if(d.length == 1){
		d = '0'+d;	
	}
	var time = d + '/' + m + '/' + y;
	return time;
}

function monthdifferent(first, second) {
		var mdy1 = first.split('/');
		var mdy2 = second.split('/');
		if (mdy1[0] == '01') {
			return (Number(mdy2[2]) - Number(mdy1[2])) * 12 + Number(mdy2[1])
					- Number(mdy1[1]) + 1;
		} else {
			return (Number(mdy2[2]) - Number(mdy1[2])) * 12 + Number(mdy2[1])
					- Number(mdy1[1]);
		}
	}
var ChuSo=new Array(" không "," một "," hai "," ba "," bốn "," năm "," sáu "," bảy "," tám "," chín ");
var Tien=new Array( "", " nghìn", " triệu", " tỷ", " nghìn tỷ", " triệu tỷ");
function DocTienBangChu(SoTien) {
	var lan=0;
	var i=0;
	var so=0;
	var KetQua="";
	var tmp="";
	var ViTri = new Array();
	if(SoTien<0) return "Số tiền âm";
	if(SoTien==0) return "Không đồng";
	if(SoTien>0)
	{
	    so=SoTien;
	}
	else
	{
	    so = -SoTien;
	}
	if (SoTien > 8999999999999999)
	{
	    //SoTien = 0;
	    return "Số quá lớn!";
	}
	ViTri[5] = Math.floor(so / 1000000000000000);
	if(isNaN(ViTri[5]))
	    ViTri[5] = "0";
	so = so - parseFloat(ViTri[5].toString()) * 1000000000000000;
	ViTri[4] = Math.floor(so / 1000000000000);
	 if(isNaN(ViTri[4]))
	    ViTri[4] = "0";
	so = so - parseFloat(ViTri[4].toString()) * 1000000000000;
	ViTri[3] = Math.floor(so / 1000000000);
	 if(isNaN(ViTri[3]))
	    ViTri[3] = "0";
	so = so - parseFloat(ViTri[3].toString()) * 1000000000;
	ViTri[2] = parseInt(so / 1000000);
	 if(isNaN(ViTri[2]))
	    ViTri[2] = "0";
	ViTri[1] = parseInt((so % 1000000) / 1000);
	 if(isNaN(ViTri[1]))
	    ViTri[1] = "0";
	ViTri[0] = parseInt(so % 1000);
	if(isNaN(ViTri[0]))
	    ViTri[0] = "0";
	if (ViTri[5] > 0)
	{
	    lan = 5;
	}
	else if (ViTri[4] > 0)
	{
	    lan = 4;
	}
	else if (ViTri[3] > 0)
	{
	    lan = 3;
	}
	else if (ViTri[2] > 0)
	{
	    lan = 2;
	}
	else if (ViTri[1] > 0)
	{
	    lan = 1;
	}
	else
	{
	    lan = 0;
	}
	for (i = lan; i >= 0; i--)
	{
	   tmp = DocSo3ChuSo(ViTri[i]);
	   KetQua += tmp;
	   if (ViTri[i] > 0) KetQua += Tien[i];
	//   if ((i > 0) && (tmp.length > 0)) KetQua += ',';//&& (!string.IsNullOrEmpty(tmp))
	
	}
	if (KetQua.substring(KetQua.length - 1) == ',')
	{
	    KetQua = KetQua.substring(0, KetQua.length - 1);
	}
	KetQua = KetQua.substring(1,2).toUpperCase()+ KetQua.substring(2);
	return KetQua +" đồng";//.substring(0, 1);//.toUpperCase();// + KetQua.substring(1);
}
//Hàm đọc số có ba chữ số;
function DocSo3ChuSo(baso) {
	var tram;
	var chuc;
	var donvi;
	var KetQua="";
	tram=parseInt(baso/100);
	chuc=parseInt((baso%100)/10);
	donvi=baso%10;
	if(tram==0 && chuc==0 && donvi==0) return "";
	if(tram!=0)
	{
	    KetQua += ChuSo[tram] + " trăm ";
	    if ((chuc == 0) && (donvi != 0)) KetQua += " linh ";
	}
	if ((chuc != 0) && (chuc != 1))
	{
	        KetQua += ChuSo[chuc] + " mươi";
	        if ((chuc == 0) && (donvi != 0)) KetQua = KetQua + " linh ";
	}
	if (chuc == 1) KetQua += " mười ";
	switch (donvi)
	{
	    case 1:
	        if ((chuc != 0) && (chuc != 1))
	        {
	            KetQua += " mốt ";
	        }
	        else
	        {
	            KetQua += ChuSo[donvi];
	        }
	        break;
	    case 5:
	        if (chuc == 0)
	        {
	            KetQua += ChuSo[donvi];
	        }
	        else
	        {
	            KetQua += " lăm ";
	        }
	        break;
	    default:
	        if (donvi != 0)
	        {
	            KetQua += ChuSo[donvi];
	        }
	        break;
	    }
	return KetQua;
}